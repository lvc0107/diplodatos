install.packages("~/Downloads/mice_3.5.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/mice_3.5.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/mice_3.5.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("mitml")
install.packages("~/Downloads/mitml_0.3-7.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/jomo_2.6-8.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/lme4_1.1-21.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/nloptr_1.2.1.tgz", repos = NULL, type = .Platform$pkgType)
library(mice)
set.seed(100)
original<-iris
iris[sample(1:nrow(iris), 40), "Sepal.Length"] <- NA
library(mice)
library(mice)
iris
install.packages("~/Downloads/VIM_4.8.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/e1071_1.7-1.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/rgl_0.100.19.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/manipulateWidget_0.10.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/webshot_0.5.1.tgz", repos = NULL, type = .Platform$pkgType)
knitr::opts_chunk$set(echo = FALSE)
fligths[(fligths$dest == 'HOU')  | (fligths$dest == 'IAH'), ]
fligths[fligths$dep_delay > 2,]
library(nycflights13)
fligths<-nycflights13::flights
fligths
fligths[fligths$dep_delay > 2,]
#123394 rows / 336766 rows
fligths[(fligths$dest == 'HOU')  | (fligths$dest == 'IAH'), ]
#airlines<-nycflights13::airlines
#fligths_carriers<-fligths[,c("carrier")]
#fligths_carriers[!duplicated(fligths_carriers)]
fligths[(fligths$carrier == 'UA')  | (fligths$carrier == 'AA')  | (fligths$carrier == 'DL'), ]
fligths[(fligths$month == 7)  | (fligths$month == 8)  | (fligths$month == 9), ]
fligths[(fligths$dep_delay == 0)  & (fligths$arr_delay > 2) , ]
fligths[(fligths$hour >= 0)  & (fligths$hour <= 6) , ]
knitr::opts_chunk$set(echo = FALSE)
sample(1:40,5)
sample(c("H","T"), 10, replace=T)
sample(c("succ", "fail"), 10, replace=T, prob=c(0.9, 0.1))
x <- 0:50
plot(x,dbinom(x,size=50,prob=.33),type="h")
n=100
x <- rnorm (n, mean=0, sd=1)
mean(x)
sd(x)
quantile(x)
runif(10, min=2, max=5)
Nsim=10^4
x=runif(Nsim)
x1=x[-Nsim]
x2=x[-1]
par(mfrow=c(1,3))
hist(x)
plot(x1,x2)
acf(x)
set.seed(1)
runif(5)
set.seed(1)
runif(5)
set.seed(2)
runif(5)
MC1seed <- .Random.seed # save the generator state
.Random.seed <- MC1seed # restore seed
Nsim=10^4
#number of random variables
U=runif(Nsim)
X=-log(U)
#transforms of uniforms
Y=rexp(Nsim)
#exponentials from R
#plots
par(mfrow=c(1,2))
hist(X,freq=F,main="Exp from Uniform")
hist(Y,freq=F,main="Exp from R")
# create a vector
x <- c(5,4:8,12)
x
y <- subset(x, x < 6)
y
# create a vector
z <- c(6:10, 12, -3)
z
which(z > 8)
# create a vector
x <- c(-2, 5:10, 15)
x
# if values are < 7 will code those 1, else will become 0
ifelse(x < 7, 1, 0)
# also you can do this
ifelse(x < 7, 1, x)
# matrix with 12 random numbers in 4 rows
x <- matrix(rnorm(12), nrow=4)
x
# find the number in 3rd row and 2nd column
x[3,2]
# show second columns
x[,2]
# show forth row
x[4,]
# find number or columns and rows in matrix
dim(x)
?Control
u1 <- rnorm(30) # create a vector filled with random normal values
print("This loop calculates the square of the first 10 elements of
vector u1")
usq<-0
for(i in 1:10)
{
usq[i]<-u1[i]*u1[i] # i-th element of u1 squared into i-th position
print(usq[i])
}
print(i)
# nested for: multiplication table
mymat = matrix(nrow=30, ncol=30) # create a 30 x 30 matrix
for(i in 1:dim(mymat)[1]){
# for each row
for(j in 1:dim(mymat)[2]){
# for each column
# assign values based on position: product of two indexes
mymat[i,j] = i*j
}
}
mymat[1:5,1:5] # show just the upper left 5x5 chunk
n=100
v1 <- rnorm(n)
v2 <- rnorm(n)
v3 <- 0
#
for (i in 1:n)
{
v3[i] <-v1[i] + v2[i]
}
v3 = v1 + v2
m=10; n=10;
mymat<-replicate(m, rnorm(n)) # create matrix of normal random numbers
mydframe=data.frame(mymat) # transform into data frame
# measure loop execution
system.time(
for (i in 1:m) {
for (j in 1:n) {
mydframe[i,j]<-mydframe[i,j] + 10*sin(0.75*pi)
}
}
)
#### elementary example of apply function
# define matrix mymat by replicating the sequence 1:5 for 4 times and transforming into a matrix
mymat<-matrix(rep(seq(5), 4), ncol = 5)
# mymat sum on rows
apply(mymat, 1, sum)
# mymat sum on columns
apply(mymat, 2, sum)
# produce a summary column wise (for each column)
apply(mymat, 2, function(x, y) summary(mymat))
a <- 1:10
save(a, file = "Data.Rdata")
rm(a)
load("Data.Rdata")
print(a)
var1 <- 1:5
var2 <- (1:5) / 10
var3 <- c("Diplo", "Datos", "en", "FaMAF", "@UNC")
a <- data.frame(var1, var2, var3)
names(a) <- c("VariableInt", "VariableReal", "VariableChar")
write.csv(a, "Data.csv", row.names = FALSE)
#rm(a)
b <- read.csv("Data.csv")
print(b)
# create a data frame
hospital <- c("Cordoba", "Buenos Aires")
pacientes <- c(150, 350)
df <- data.frame(hospital, pacientes)
df
# structure
str(df)
write.table(df,file="data.dat")
misdatos <- read.table("data.dat")
misdatos$hospital
misdatos["hospital"]
?read.table
str(iris)
library(mboost)
data("bodyfat", package="TH.data")
str(bodyfat)
head(bodyfat)
dim(iris)
names(iris)
str(iris)
attributes(iris)
iris[1:5,]
iris[1:10, "Sepal.Length"]
# Introduce missing values
set.seed(100)
original<-iris
iris[sample(1:nrow(iris), 40), "Sepal.Length"] <- NA
#  ERROR here in MAC
# Error: package or namespace load failed for ‘mice’ in rbind(info, getNamespaceInfo(env, "S3methods")):
#number of columns of matrices must match (see arg 2)
#library(mice)
# pertence a Mice que no lo pude instalar
#md.pattern(iris)
#library(VIM)
#Error: package or namespace load failed for 'VIM' in rbind(info, getNamespaceInfo(env, "S3methods")):
# number of columns of matrices must match (see arg 2)
#Execution halted
# pertecene a VIM
#aggr_plot <- aggr(iris, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(iris), cex.axis=.7, gap=3, ylab=c("Histogram #of missing data","Pattern"))
library(Hmisc)
impute(iris$Sepal.Length, mean)  # replace with mean
iris<-original
summary(iris)
table(iris$Species)
pie(table(iris$Species))
mean(iris$Sepal.Length)
var(iris$Sepal.Length)
hist(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
library(mice)
install.packages("~/Downloads/mice_3.5.0.tgz", repos = NULL, type = .Platform$pkgType)
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages(webshot)
remove.packages('webshot')
remove.packages('VIM')
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
***********************************************************
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages('e1071')
remove.packages('rgl')
***********************************************************
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages('nloptr')
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages('mice')
remove.packages('jomo')
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages('lme4')
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages('mitml')
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
remove.packages('manipulateWidget')
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
hist(iris$Sepal.Length)
install.packages("mice")
install.packages("mice")
allPackages <- installed.packages()[, 1]
findBrokenPackages <- function(packages) {
for (p in packages) {
tryCatch(ncol(asNamespace(p)$.__NAMESPACE__.$S3methods),
error = function(e) print(c(p, e)))
}
}
findBrokenPackages(allPackages)
install.packages("mice") --host
install.packages("mice")
install.packages("mice")
install.packages("mice")
install.packages("mice")
install.packages("mboost")
install.packages("TH.data")
install.packages("nycflights13")
install.packages(c("knitr", "mboost", "mice", "nycflights13"))
install.packages(c("knitr", "mboost", "mice", "nycflights13"))
install.packages(c("Hmisc", "scatterplot3d"))
install.packages("rgl")
install.packages("VIM")
install.packages(c("cluster", "nlme"))
